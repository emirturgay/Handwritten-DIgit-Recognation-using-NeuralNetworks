preprocessing.py---

import cv2
import numpy as np

def morphology(img):
		
	thimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
	thimg = cv2.Canny(img, 140, 250)
	# cv2.imshow("sdf",thimg)
	# erode = cv2.erode(thimg,np.ones((3,3),np.uint8))
	# dilute   = cv2.dilate(erode, np.ones((3,3),np.uint8))
	# cv2.imshow('erode', erode)
	# cv2.imshow('d', dilute)

	closing = cv2.morphologyEx(thimg, cv2.MORPH_CLOSE, np.ones((3,3),np.uint8))
	# cv2.imshow("after_closing",closing)
	dilute   = cv2.dilate(closing, np.ones((3,3),np.uint8))
	dilute = cv2.morphologyEx(dilute, cv2.MORPH_CLOSE, np.ones((3,3),np.uint8))

	# cv2.imshow("after_dilute",dilute)
	return dilute


model.py

from keras.models import Sequential,model_from_yaml
from keras.layers import Dense,Dropout,Flatten
from keras.layers.convolutional import Conv2D,MaxPooling2D


def createmodel():
	model = Sequential()
	model.add(Conv2D(32,(5,5),input_shape=(1,28,28),activation='relu' ))
	model.add(MaxPooling2D(pool_size=(2,2)))
	model.add(Dropout(0.2))
	model.add(Flatten())
	model.add(Dense(128,activation='relu'))
	model.add(Dense(10,activation='softmax'))

	model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
	
	return model

def load_model():
	with open('model.yaml','r') as f:
		model_file = f.read()
	model = model_from_yaml(model_file)
	model.load_weights('model.h5')
	return model




train.py


from sklearn.svm 			 import LinearSVC
from sklearn.model_selection import train_test_split
import pandas as pd
from model import *
import numpy as np
from keras.models import Sequential,model_from_yaml
from keras.layers import Dense,Dropout,Flatten
from keras.utils  import np_utils
from keras.layers.convolutional import Conv2D,MaxPooling2D
from keras import backend as K
K.set_image_dim_ordering('th')


def load_data():
	df = pd.read_csv('./Training-data/train.csv')
	y = df['label']
	x = df.drop('label',1)
	y = np.array(y)
	x = np.array(x)
	
	train_x,test_x,train_y,test_y = train_test_split(x,y,test_size=0.2)
	del x,y 
	
	train_x = train_x.reshape(len(train_x),1,28,28).astype('float32')
	test_x  = test_x.reshape(len(test_x),1,28,28).astype('float32')

	train_x = train_x/255
	test_x  = test_x/255

	train_y = np_utils.to_categorical(train_y)
	test_y = np_utils.to_categorical(test_y)
	
	num_classes = test_y.shape[1]
	return train_x,test_x,train_y,test_y


def train():
	print('Loading data...',end='')
	train_x,test_x,train_y,test_y = load_data()
	print('Done')
	model = createmodel()
	print('Training...\n\n')
	model.fit(train_x,train_y,validation_data=(test_x,test_y),epochs=20,batch_size=200,verbose=2)
	print('\n\nTraning complete')
	print('testing on test data..',end='')
	scores = model.evaluate(test_x,test_y,verbose=0)
	print('Done')
	print('CNN Error:'+str(100-scores[1]*100))

	model_yaml = model.to_yaml()
	with open('model.yaml','w') as yaml_file:
		yaml_file.write(model_yaml)

	model.save_weights('model.h5')
	print('model saved')





main.py


import sys
from preprocessing 	import *
from train 			import *
from predict 		import *

def loadimg(path):
	img = cv2.imread(path)
	return img


def main():
	# print(sys.argv[1])
	if(sys.argv[1]=="train"):
		train()
	elif(sys.argv[1] == "detect"):
		try:
			sys.argv[2]
		except Exception as e:
			print('use "python main.py decect <img_path>" to detect')
		else:
			path   = sys.argv[2]
			img    = loadimg(path)
			th_img = morphology(img)
			cv2.imshow('winname', th_img)
			# cv2.imshow('realimg', img)
			predict(img,th_img)
		# cv2.waitKey(0)
	else:
		print('\n\nuse "python main.py train" to train ')
		print('use "python main.py decect <img_path>" to detect')



if __name__ == '__main__':
	main()








